<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数位dp</title>
    <link href="/2020/09/26/%E6%95%B0%E4%BD%8Ddp/"/>
    <url>/2020/09/26/%E6%95%B0%E4%BD%8Ddp/</url>
    
    <content type="html"><![CDATA[<h1 id="数位dp"><a href="#数位dp" class="headerlink" title="数位dp"></a>数位dp</h1><p><strong>文中提到的引用均来自</strong><a href="https://blog.csdn.net/wust_zzwh/article/details/52100392">巨佬</a></p><ul><li>数位dp,一般是求一段区间内满足给定条件的数的个数，数位：顾名思义，就是按照一个数的位数进行dp，比如一个三位数，就按照百位、十位、个位进行。</li><li>但是我感觉，有些带记忆的dfs内味了</li></ul><p>数位dp实质还是一种暴力枚举的方法<br>对于区间 <strong>[l,r]</strong>  求满足条件的数的个数，最简单的暴力做法如下：</p><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l;  l &lt;= r; i++)&#123;<span class="hljs-keyword">if</span>(fair(i))ans++;&#125;</code></pre><p>但是这样如果l 是1而r是1e9，这种暴力的做法就直接没了，而数位dp由于是按照位数进行枚举每一种可能，这样就降低了每一次判断的复杂度（个人理解）其次就是记忆化搜索（这个是最重要的一点），使枚举的数字都满足了dp的性质 满足递推公式 <strong>dp[pos][j] = sum(dp[pos - 1][k])</strong> j是指某个状态下(这个可以先略过，重点是公式) </p><p>这是我引用的数位dp枚举的一个小过程    <del>说好的自己写呢？</del></p><blockquote><p>新的枚举：控制上界枚举，从最高位开始往下枚举，例如：ri=213，那么我们从百位开始枚举：百位可能的情况有0,1,2(觉得这里枚举0有问题的继续看)<br>然后每一位枚举都不能让枚举的这个数超过上界213（下界就是0或者1，这个次要），当百位枚举了1，那么十位枚举就是从0到9，因为百位1已经比上界2小了，后面数位枚举什么都不可能超过上界。所以问题就在于：当高位枚举刚好达到上界是，那么紧接着的一位枚举就有上界限制了。具体的这里如果百位枚举了2，那么十位的枚举情况就是0到1，如果前两位枚举了21，最后一位之是0到3(这一点正好对于代码模板里的一个变量limit 专门用来判断枚举范围)。最后一个问题：最高位枚举0：百位枚举0，相当于此时我枚举的这个数最多是两位数，如果十位继续枚举0，那么我枚举的就是以为数咯，因为我们要枚举的是小于等于ri的所以数，当然不能少了位数比ri小的咯！(这样枚举是为了无遗漏的枚举，不过可能会带来一个问题，就是前导零的问题，模板里用lead变量表示，不过这个不是每个题目都是会有影响的，可能前导零不会影响我们计数，具体要看题目)</p></blockquote><p>上面的枚举只规定了上限，即区间的上边界，那么我们该如果去求得 <strong>[l,r]</strong> 区间满足条件的个数呢?我们上面求的既然是 <strong>[1,r]</strong> 那么我们再求一遍 <strong>[1 , l -1]**，这样用 **num( [1,r] ) - num([1, l - 1])</strong> 就可以求出  <strong>[l, r]</strong> 的满足条件的数量</p><p>这里我直接引用一个数位dp的模板（套路），把里面一些我自己的理解说一说</p><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">int</span> a[<span class="hljs-number">20</span>];ll dp[<span class="hljs-number">20</span>][state];<span class="hljs-comment">//不同题目状态不同</span><span class="hljs-function">ll <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-comment">/*state变量*/</span>,<span class="hljs-keyword">bool</span> lead<span class="hljs-comment">/*前导零*/</span>,<span class="hljs-keyword">bool</span> limit<span class="hljs-comment">/*数位上界变量*/</span>)</span><span class="hljs-comment">//不是每个题都要判断前导零</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">//递归边界，既然是按位枚举，最低位是0，那么pos==-1说明这个数我枚举完了</span>    <span class="hljs-keyword">if</span>(pos==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">/*这里一般返回1，表示你枚举的这个数是合法的，那么这里就需要你在枚举时必须每一位都要满足题目条件，也就是说当前枚举到pos位，一定要保证前面已经枚举的数位是合法的。不过具体题目不同或者写法不同的话不一定要返回1 */</span>    <span class="hljs-comment">//第二个就是记忆化(在此前可能不同题目还能有一些剪枝)</span>    <span class="hljs-keyword">if</span>(!limit &amp;&amp; !lead &amp;&amp; dp[pos][state]!=<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> dp[pos][state];    <span class="hljs-comment">/*常规写法都是在没有限制的条件记忆化，这里与下面记录状态是对应，具体为什么是有条件的记忆化后面会讲*/</span>    <span class="hljs-keyword">int</span> up=limit?a[pos]:<span class="hljs-number">9</span>;<span class="hljs-comment">//根据limit判断枚举的上界up;这个的例子前面用213讲过了</span>    ll ans=<span class="hljs-number">0</span>;    <span class="hljs-comment">//开始计数</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=up;i++)<span class="hljs-comment">//枚举，然后把不同情况的个数加到ans就可以了</span>    &#123;        <span class="hljs-keyword">if</span>() ...        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()...        ans+=dfs(pos<span class="hljs-number">-1</span>,<span class="hljs-comment">/*状态转移*/</span>,lead &amp;&amp; i==<span class="hljs-number">0</span>,limit &amp;&amp; i==a[pos]) <span class="hljs-comment">//最后两个变量传参都是这样写的</span>        <span class="hljs-comment">/*这里还算比较灵活，不过做几个题就觉得这里也是套路了</span><span class="hljs-comment">        大概就是说，我当前数位枚举的数是i，然后根据题目的约束条件分类讨论</span><span class="hljs-comment">        去计算不同情况下的个数，还有要根据state变量来保证i的合法性，比如题目</span><span class="hljs-comment">        要求数位上不能有62连续出现,那么就是state就是要保存前一位pre,然后分类，</span><span class="hljs-comment">        前一位如果是6那么这意味就不能是2，这里一定要保存枚举的这个数是合法*/</span>    &#125;    <span class="hljs-comment">//计算完，记录状态</span>    <span class="hljs-keyword">if</span>(!limit &amp;&amp; !lead) dp[pos][state]=ans;    <span class="hljs-comment">/*这里对应上面的记忆化，在一定条件下时记录，保证一致性，当然如果约束条件不需要考虑lead，这里就是lead就完全不用考虑了*/</span>    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function">ll <span class="hljs-title">solve</span><span class="hljs-params">(ll x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> pos=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x)<span class="hljs-comment">//把数位都分解出来</span>    &#123;        a[pos++]=x%<span class="hljs-number">10</span>;<span class="hljs-comment">//个人老是喜欢编号为[0,pos),看不惯的就按自己习惯来，反正注意数位边界就行</span>        x/=<span class="hljs-number">10</span>;    &#125;    <span class="hljs-keyword">return</span> dfs(pos<span class="hljs-number">-1</span><span class="hljs-comment">/*从最高位开始枚举*/</span>,<span class="hljs-comment">/*一系列状态 */</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//刚开始最高位都是有限制并且有前导零的，显然比最高位还要高的一位视为0嘛</span>&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    ll le,ri;    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;le,&amp;ri))    &#123;        <span class="hljs-comment">//初始化dp数组为-1,这里还有更加优美的优化,后面讲</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,solve(ri)-solve(le<span class="hljs-number">-1</span>));    &#125;&#125;</code></pre><p>对于</p><ul><li><p>1、 <strong>limit &amp;&amp; i==a[pos]</strong><br>因为我们要判断当前位数前一位是不是到达上界了，只有&amp;后面的条件是不可以的<br>比如 213 如果 百位枚举1，十位枚举1，那么要枚举个位的时候，十位到达上界了吗？显然没有，因为十位可以枚举到10，所以我们要往前判断两步，一步是枚举上一位数是不是与上边界的相同位的数字相等，以及上上位数是不是处于那一位的边界状态。</p></li><li><p>2、在减枝和记忆化中的 <strong>if(!limit)</strong> 首先看    <em>return dp[pos][sta]</em>  如果，由于dp[pos][sta]是当前状态和当前位数下所有满足条件的和，比如213 ，dp[1][sta]是后两位所有满足条件的和，也就是说十位的枚举是用0 - 9里面找满足的数字，但是如果没有前面的限制条件，我们在已知百位枚举到2的时候，我们十位可以枚举 0 -9里面满足的数吗？显然不能因为由于前面百位的上界的限制，肯定不能枚举0 -9，所以直接返回会返回比正确答案多的数量，同理在记忆化的时候，由于它枚举的总和小于我们规定的dp[pos][sta]的值，如果这时候记忆化了，就导致dp数组的值要比正确的值小，在后面直接取记忆化的值时，会造成错误</p></li></ul><p>这句引用的话也说的很好</p><blockquote><p>limit为true的数并不多，一个个枚举不会很浪费时间，所以我们记录下! limit的状态解决了不少子问题重叠。</p></blockquote><h1 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2089">hdu 2089 不要62</a></p><blockquote><p>要求数位上不能有4，且62不能连续出现，这样枚举的时候，遇见4直接跳过，遇到6先记下来，然后在枚举下一位的时候，如果有2就跳过，这里开两个状态记录分别记录，dp[pos][sta] pos是当前位数，sta是上一位是不是6 （0不是，1是）</p></blockquote><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e6</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">int</span> a[<span class="hljs-number">20</span>];<span class="hljs-keyword">int</span> dp[<span class="hljs-number">20</span>][<span class="hljs-number">2</span>];<span class="hljs-comment">//第二维 0是第 i 位前一位不为6时满足条件的个数，1则是前一位为6时满足条件的个数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos , <span class="hljs-keyword">int</span> pre , <span class="hljs-keyword">int</span> sta, <span class="hljs-keyword">bool</span> limit)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">//递归终点，到终点的数一定是满足条件的，所以直接计数+1</span>    <span class="hljs-keyword">if</span>(pos == <span class="hljs-number">-1</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(!limit &amp;&amp; dp[pos][sta] != <span class="hljs-number">-1</span>)    <span class="hljs-keyword">return</span> dp[pos][sta];    <span class="hljs-keyword">int</span> up = limit? a[pos] : <span class="hljs-number">9</span>;    <span class="hljs-keyword">int</span>  tmp = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= up; i++)&#123;        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">4</span>)  <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">if</span>(pre == <span class="hljs-number">6</span> &amp;&amp; i == <span class="hljs-number">2</span>)  <span class="hljs-keyword">continue</span>;        tmp += dfs(pos - <span class="hljs-number">1</span> , i , i == <span class="hljs-number">6</span> , limit &amp;&amp; i == a[pos]);    &#125;    <span class="hljs-keyword">if</span>(!limit)  dp[pos][sta] = tmp;    <span class="hljs-keyword">return</span> tmp;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x)&#123;        a[pos++] = x % <span class="hljs-number">10</span>;        x /= <span class="hljs-number">10</span>;    &#125;    <span class="hljs-keyword">int</span> ans = dfs(pos - <span class="hljs-number">1</span> , <span class="hljs-number">-1</span> ,<span class="hljs-number">0</span> ,<span class="hljs-literal">true</span>);    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> l,r;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r) &amp;&amp; l + r)&#123;        <span class="hljs-built_in">memset</span>(dp, - <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span> dp);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, Solve(r) - Solve(l - <span class="hljs-number">1</span>));     &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h1 id="数位dp的优化："><a href="#数位dp的优化：" class="headerlink" title="数位dp的优化："></a>数位dp的优化：</h1><h2 id="例hdu-4734"><a href="#例hdu-4734" class="headerlink" title="例hdu 4734"></a>例<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4734">hdu 4734</a></h2><blockquote><p>题意</p><p>题目给了个f(x)的定义：F(x) = An * 2n-1 + An-1 * 2n-2 + … + A2 * 2 + A1 * 1，Ai是十进制数位，然后给出a,b求区间[0,b]内满足f(i)&lt;=f(a)的i的个数。</p></blockquote><p>这个题,如果你选择最朴素的数位dp的做法的话,因为输入一次a的值,就要重新清空一次dp数组,由于这个题时间卡的很死,所以把memset放在循环里, 会时间超限<br>或者按照这种思路但是内存就爆了</p><blockquote><p>如果要memset优化就要加一维存f(a)的不同取值，那就是dp[10][4600][4600]，这显然不合法。,所以这里优</p></blockquote><p>思路:</p><ul><li>那我们就可以选择利用减法,每一步都减去当前位置的权值,那么当走到最后一位的时候,如果sum &gt;= 0 ,说明f(a) &gt;= f(i)的,相反如果sum在某一位的时候 &lt; 0就说明一定f(i) &lt; f(a),就不用继续向下找了,起到了剪枝的作用</li></ul><p>所以这样dp状态就和f(a)没有关系了,那么我们只需要在循环外memset一次就可以了<br>因为我们的终点状态是跟f(a)没有关系的,这样就算我们遇到了上次循环用到的dp数组空间,那么也没有关系,因为上一次的dp[pos][rsum]难道和这一次到这个状态的值不一样吗?显然是一样的,如过没有遇到上一次的状态,那我们也可以当作清空了dp数组,这样来说,清一次dp数组就够了.</p><p><strong>TLE</strong> 代码</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e6</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Sum = <span class="hljs-number">5000</span>;<span class="hljs-keyword">int</span> a[<span class="hljs-number">20</span>] , p[<span class="hljs-number">11</span>];<span class="hljs-keyword">int</span> dp[<span class="hljs-number">20</span>][Sum];<span class="hljs-keyword">int</span> cmp;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos , <span class="hljs-keyword">int</span> sum , <span class="hljs-keyword">bool</span> limit)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">//递归终点，到终点的数一定是满足条件的，所以直接计数+1</span>    <span class="hljs-keyword">if</span>(pos == <span class="hljs-number">-1</span>)   <span class="hljs-keyword">return</span>  sum &lt;= cmp;    <span class="hljs-keyword">if</span>(!limit &amp;&amp; dp[pos][sum] != <span class="hljs-number">-1</span>)    <span class="hljs-keyword">return</span> dp[pos][sum];    <span class="hljs-keyword">int</span> up = limit? a[pos] : <span class="hljs-number">9</span>;    <span class="hljs-keyword">int</span>  tmp = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= up; i++)&#123;        tmp += dfs(pos - <span class="hljs-number">1</span> ,sum + i * p[pos], limit &amp;&amp; i == a[pos]);    &#125;    <span class="hljs-keyword">if</span>(!limit)  dp[pos][sum] = tmp;    <span class="hljs-keyword">return</span> tmp;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x)&#123;        a[pos++] = x % <span class="hljs-number">10</span>;        x /= <span class="hljs-number">10</span>;    &#125;    <span class="hljs-keyword">int</span> ans = dfs(pos - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<span class="hljs-literal">true</span>);    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>,fsum = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x)&#123;        <span class="hljs-keyword">int</span> d = x % <span class="hljs-number">10</span>;        x  = x / <span class="hljs-number">10</span>;        fsum  = fsum + d * p[l];        l++;    &#125;    <span class="hljs-keyword">return</span> fsum;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> a,b,t;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)    p[i]  = p[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span>;    <span class="hljs-comment">//memset(dp, - 1, sizeof dp);</span>    <span class="hljs-keyword">int</span> Case = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(t--)&#123;        <span class="hljs-built_in">memset</span>(dp, - <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span> dp);        Case++;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);        cmp  = f(a);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %d\n&quot;</span>,Case, Solve(b) );     &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>ac代码</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e6</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Sum = <span class="hljs-number">5000</span>;<span class="hljs-keyword">int</span> a[<span class="hljs-number">20</span>] , p[<span class="hljs-number">11</span>];<span class="hljs-keyword">int</span> dp[<span class="hljs-number">20</span>][Sum];<span class="hljs-keyword">int</span> cmp;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos , <span class="hljs-keyword">int</span> sum ,<span class="hljs-keyword">bool</span> lead ,  <span class="hljs-keyword">bool</span> limit)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">//递归终点，到终点的数一定是满足条件的，所以直接计数+1</span>    <span class="hljs-keyword">if</span>(pos == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> sum &gt;= <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(sum &lt; <span class="hljs-number">0</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//剪枝</span>    <span class="hljs-keyword">if</span>(!limit &amp;&amp; dp[pos][sum] != <span class="hljs-number">-1</span>)    <span class="hljs-keyword">return</span> dp[pos][sum];    <span class="hljs-keyword">int</span> up = limit? a[pos] : <span class="hljs-number">9</span>;    <span class="hljs-keyword">int</span>  tmp = <span class="hljs-number">0</span> ,num1;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= up; i++)&#123;        <span class="hljs-keyword">if</span>( lead &amp;&amp; !i )   num1 = sum;        <span class="hljs-keyword">else</span>    num1 = sum - i * p[pos];        tmp += dfs(pos - <span class="hljs-number">1</span> ,num1,lead &amp;&amp; i == <span class="hljs-number">0</span>, limit &amp;&amp; i == a[pos]);    &#125;    <span class="hljs-keyword">if</span>(!limit)  dp[pos][sum] = tmp;    <span class="hljs-keyword">return</span> tmp;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x)&#123;        a[pos++] = x % <span class="hljs-number">10</span>;        x /= <span class="hljs-number">10</span>;    &#125;    <span class="hljs-keyword">int</span> ans = dfs(pos - <span class="hljs-number">1</span>, cmp, <span class="hljs-literal">true</span> , <span class="hljs-literal">true</span>);    <span class="hljs-comment">//前导0 , 上界</span>    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>,fsum = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(x)&#123;        <span class="hljs-keyword">int</span> d = x % <span class="hljs-number">10</span>;        x  = x / <span class="hljs-number">10</span>;        fsum  = fsum + d * p[l];        l++;    &#125;    <span class="hljs-keyword">return</span> fsum;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> a,b,t;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)    p[i]  = p[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span>;    <span class="hljs-built_in">memset</span>(dp, - <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span> dp);    <span class="hljs-keyword">int</span> Case = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(t--)&#123;        <span class="hljs-comment">//memset(dp, - 1, sizeof dp);</span>        Case++;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);        cmp  = f(a);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %d\n&quot;</span>,Case, Solve(b) );     &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2020/09/23/%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <url>/2020/09/23/%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h4 id="作为我自己搭建的博客的第一篇文章，还没有更新啥与技术与算法相关的东西，先写写自己最近的感悟吧"><a href="#作为我自己搭建的博客的第一篇文章，还没有更新啥与技术与算法相关的东西，先写写自己最近的感悟吧" class="headerlink" title="作为我自己搭建的博客的第一篇文章，还没有更新啥与技术与算法相关的东西，先写写自己最近的感悟吧"></a>作为我自己搭建的博客的第一篇文章，还没有更新啥与技术与算法相关的东西，先写写自己最近的感悟吧</h4><hr><ul><li><p>最近感觉特别松懈，而且在学习上遇到了一些瓶颈，后缀数组确实太难了，一想到字符串就头疼，害，第一篇文章，说这干嘛。</p></li><li><p>最近s10开始了，第一次感觉到s10的比赛离我这么陌生，之前听好多人说的lol已经成了青春回忆，属实没有什么感觉，如今忙于<del>划水</del>学习，已经好长时间没有摸这个游戏了，前俩月还跟hxdm一起打冠军杯赛拿了个冠军，有点当年第一次参加线下赛的感觉了<del>那个开局摁df的霞，团战摁错闪现贴对面脸的霞</del>，确实感觉这些离我越来越远了，今年开学早的原因，线下赛也没有去，<del>虽然都是bo1一轮游</del>，现在我也从钻石退化到菜鸡了，这个游戏现在只给我剩下些许回忆了，可能这就是好多人口中的“青结”？<del>我还没大学毕业呢！</del></p></li><li><p>最近封校不让出去，在学校里看着一对一对的情侣，确实是羡慕极了，但是自己只是归于羡慕，<del>对于找对象，还是怂人一个</del>，等等，我在说啥？跳过跳过（doge）最近狗粮吃多了，但是xs说的好：<em>“<strong>你谈你的情，我看我的景</strong>”</em></p></li><li><p>最后，本来想着再多扯点的，一是文采不够，有话说不出 <del>这里没有暗示啥</del>，二来确实今天挺晚的了，睡觉睡觉，<del>狗</del>苟命最重要。</p></li><li><p>等等，还是要先立个flag的：打算每隔3天左右去把旧的博客文章转到新博客里去，因为当时图省事，就拿别人的链接来省去自己对算法或者技术的解释和理解，所以要对算法博客进行翻新和填坑 <del>大部分重写</del>以及学习新的算法（包括且不限于折腾了我一星期的后缀数组）如果你们愿意去看我原来csdn的博客，也欢迎啊，毕竟涨访问量也很好不是吗？hhhh</p></li><li><p><a href="https://blog.csdn.net/CUCUC1">csdn链接</a></p></li><li></li><li><p>以s t的一句话做结尾吧，顺便也抓住年少轻狂的尾巴：<em>“<strong>我是一个百依百顺的孩子，我只听从于我自己</strong>”</em></p></li></ul><hr><p>祝愿各位晚安！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/23/hello-world/"/>
    <url>/2020/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
